<?php

namespace Common\Model\Repository;

use Doctrine\ORM\QueryBuilder;
use Common\Model\Product;
use Common\Model\Product_Photo;
use Common\Model\Product_Detail_List;
use Common\Model\Merchant;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    //Query for product search quick
    public function quicksearch($filterData) {
        $em = $this->getEntityManager();
        $filterQuery = $em->createQueryBuilder()
               ->select('p.productName,p.productPrice,d.color,d.camera,d.ramSize,d.productCompleteInfo,br.brandName,cat.categoryName')
        ->from('Common\Model\Product','p')
        ->innerjoin('p.categoryId','cat')
        ->innerjoin('p.brandId','br')
        ->join('p.productDescriptionId','d');
        
        foreach ($filterData as $filter => $data) {
            if (isset($data) && !empty($data) ) {
                switch ($filter) {                  
                    case 'min':
                        $filterQuery = $filterQuery->andWhere('p.productPrice  >=:minprice')
                        ->setParameter('minprice', $data);
                        break;         
                    case 'max':
                        $filterQuery = $filterQuery->andWhere('p.productPrice  <=:maxprice')
                        ->setParameter('maxprice', $data);
                        break;  
                    case 'brand':
                        $filterQuery=$filterQuery->andWhere('p.brandId =:brand')
                        ->setParameter('brand', $data);
                        break;
                    case 'keyword':
                            $filterQuery = $filterQuery                            
                            ->andWhere('p.productName = :keyword 
                              or d.color = :keyword 
                              or cat.categoryName = :keyword
                              or d.productCompleteInfo LIKE :keyword
                              or d.ramSize = :keyword')        
                            ->setParameter('keyword',$data);                           
                      break;
                  }
            } 
        }        
        $filterQuery = $filterQuery->getQuery()->useQueryCache(true);
        return $filterQuery->getResult();
        
    }
    
    /*query to fetch product detail in quick search using keyword for name,cam,brand,category(changes to be made)
    Pending */
    public function keywordsearch($keyword) {
      
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('p.productName,p.productPrice,d.color,d.camera,d.ramSize,d.productCompleteInfo,br.brandName,cat.categoryName')
        ->from('Common\Model\Product','p')
        ->innerjoin('p.categoryId','cat')
        ->innerjoin('p.brandId','br')
        ->join('p.productDescriptionId','d')
        ->where('p.productName LIKE :name')
        ->orWhere('p.productPrice LIKE :price')
        ->orWhere('d.camera LIKE :cam')
        ->orWhere('d.ramSize LIKE :size') //not working
        ->orWhere('cat.categoryName LIKE :cat')
        ->orWhere('br.brandName LIKE :brand')
        ->setParameter('cat',$keyword)
        ->setParameter('price',$keyword)
        ->setParameter('brand',$keyword)
        ->setParameter('name',$keyword)
        ->setParameter('size',$keyword)
        ->setParameter('cam',$keyword);
        $query=$qb->getQuery();
        //dump($query);die;
        $result=$query->getResult();
         // dump($result);die;
        return $result;
    }
   
    
    public function completeproductinfo($pName) {

        $productinfo = $this->getEntityManager()
        ->createQuery('SELECT p FROM Model:Product p JOIN p.brandId brand b WHERE p.productName =:pName')
         ->setParameter('pName', $pName)
         ->getResult();
          return $productinfo;
    }
    
    //Used in listing Products in homepage (Merchant)
    public function findAllProductDetails($id)
    {
          $em = $this->getEntityManager();
        
            $qb = $em->createQueryBuilder();
            $qb->select('l')
            ->from('Common\Model\Product_Detail_List','l')
            ->join('l.productId','p')
            ->join('p.productDescriptionId','d')
            ->where('l.merchantId = ?1')   
            ->setParameter(1,(int)$id);
            $query=$qb->getQuery();
            $result=$query->getResult();
    
            return $result;
        
    }
    
    //Query to fetch product details based on product Id
    public function findProductDetails($Id)
    {
        $em = $this->getEntityManager();
        
        $qb = $em->createQueryBuilder();
        $qb->select('p.productName,p.productPrice,d.color,d.ramSize,d.productCompleteInfo')
        ->from('Common\Model\Product','p')
        ->join('l.productDescriptionId','d')
        ->where('p.id = ?1')
        ->setParameter(1,(int)$Id);
        $query=$qb->getQuery();  
        $result=$query->getResult();
     
        return $result;
    }
   
 
 }



