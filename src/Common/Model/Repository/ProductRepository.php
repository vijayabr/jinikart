<?php

namespace Common\Model\Repository;

use Doctrine\ORM\QueryBuilder;
use Common\Model\Product;
use Common\Model\Product_Photo;
use Common\Model\Product_Detail_List;
use Common\Model\Merchant;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{

    public function productsearchBasedonBrand($brand,$min,$max) {
            $products = $this->getEntityManager()
          ->createQuery(
            'SELECT p FROM Model:Product p WHERE p.brandId =:brand AND p.productPrice >=:min AND p.productPrice <= :max ORDER BY p.productName ASC')
            ->setParameter('brand', $brand)
            ->setParameter('min', $min)
            ->setParameter('max', $max)
           ->getResult();
            return $products;
       
            
    }
    
    public function productsearch() {
        $products = $this->getEntityManager()
        ->createQuery(
            'SELECT p FROM Model:Product p ORDER BY p.productName ASC')
            ->getResult();
            return $products;
    }
    
   
    public function completeproductinfo($pName) {

        $productinfo = $this->getEntityManager()
        ->createQuery('SELECT p FROM Model:Product p JOIN p.brandId brand b WHERE p.productName =:pName')
         ->setParameter('pName', $pName)
         ->getResult();
          return $productinfo;
    }
    
     
    public function findAllProductDetails($merchantId)
    {
          $em = $this->getEntityManager();
         
            $qb = $em->createQueryBuilder();
            $qb->select('p')
            ->from('Common\Model\Product', 'p')
            ->join('p.productDescriptionId','d','WITH','p.merchantId=?1','d.id')
            ->where('p.merchantId = ?1')   
            ->setParameter(1,(int)$merchantId);
            $query=$qb->getQuery();
            
            $result=$query->getResult();
            return $result;
        
    }
 }



