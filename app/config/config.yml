imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@CustomerBundle/Resources/config/services.yml" }
    - { resource: "@MerchantBundle/Resources/config/services.yml" }
    - { resource: "@AdminBundle/Resources/config/services.yml" }
    - { resource: "@CommonServiceBundle/Resources/config/services.yml" }


# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en
    image_directory: '%kernel.project_dir%/web/images'
    company_image_directory: '%kernel.project_dir%/web/company_image'
    product_image_directory: '%kernel.project_dir%/web/images/product_photos'
    product_file_directory: '%kernel.project_dir%/web/pdfFile'
framework:
    #esi: ~
    templating:
        engines: ['twig']
    translator: { fallbacks: ['%locale%'] }
    validation: {enable_annotations: true}
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        unix_socket: /tmp/mysql.sock
        charset: UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        mappings:
            model:
                mapping:              true
                type:                 annotation
                dir:                  "%kernel.root_dir%/../src/Common/Model/"
                alias:                Model
                prefix:               Common\Model
                is_bundle:            false
            SonataUserBundle: ~
            FOSUserBundle: ~
            ApplicationSonataUserBundle: ~
#        auto_generate_proxy_classes: '%kernel.debug%'
#        naming_strategy: doctrine.orm.naming_strategy.underscore
#        auto_mapping: true

fos_user:
    db_driver:      orm # can be orm or odm
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User


    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)

    service:
        user_manager: sonata.user.orm.user_manager

    from_email:
        address: "%mailer_user%"
        sender_name: "%mailer_user%"

# Swiftmailer Configuration
swiftmailer:
    transport: smtp
    host: smtp.gmail.com
    username: jinikartecommerce@gmail.com
    password: jini1234
    encryption: tls
    

sonata_block:
    blocks:
        # enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts: [admin]

sonata_user:
    class:
        user: Application\Sonata\UserBundle\Entity\User
        group: Application\Sonata\UserBundle\Entity\Group

# Nelmio CORS Configuration
 
nelmio_cors:
    defaults:
        origin_regex: true
        allow_origin: ['*']
        allow_methods: ['GET', 'OPTIONS', 'POST', 'PUT', 'PATCH', 'DELETE']
        allow_headers: ['Content-Type', 'Authorization']
        max_age: 3600
    paths:
        '^/api/':
            allow_origin: ['*']
            allow_headers: ['Content-Type','X-Custom-Auth']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE','OPTIONS','PATCH']
            max_age: 3600
# FOSRest Configuration
# fos_rest:
#     body_listener: true
#     format_listener:
#         rules:
#             - { path: '^/', priorities: ['json', 'xml', 'html'], fallback_format: 'html' }
#     param_fetcher_listener: true
#     view:
#         view_response_listener: 'force'
#         formats:
#             json: true

fos_rest:
    param_fetcher_listener: true
    body_listener: true
    format_listener:
        enabled: true
        rules:
        - { path: '^/', priorities: ['json','html','xml'], fallback_format: 'html' }
    versioning: true
    view:
        mime_types: ['application/json', 'application/json;version=1.0', 'application/json;version=1.1', 'text/html']
        view_response_listener: 'force'
        formats:
            xml: false
            json: true

lexik_jwt_authentication:
    private_key_path :  '%jwt_private_key_path%' # required for token creation
    public_key_path:  '%jwt_public_key_path%'  # required for token verification
    pass_phrase: '%jwt_key_pass_phrase%'  # required for token creation
    token_ttl:   '%jwt_token_ttl%'